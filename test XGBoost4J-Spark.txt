
/opt/spark-2.2.0-bin-hadoop2.7/bin/spark-shell --master local[4]

/opt/spark-2.2.0-bin-hadoop2.7/bin/spark-shell --master yarn --deploy-mode client --num-executors 4


import ml.dmlc.xgboost4j.scala.spark.{XGBoost}
import org.apache.spark.ml.feature.LabeledPoint
import org.apache.spark.ml.linalg.DenseVector
import org.apache.spark.sql.Row

val trainRDD = sc.parallelize(Seq(
  LabeledPoint(1.0, new DenseVector(Array(2.0, 3.0, 4.0))), 
  LabeledPoint(0.0, new DenseVector(Array(5.0, 5.0, 5.0))), 
  LabeledPoint(1.0, new DenseVector(Array(2.0, 3.0, 4.0))), 
  LabeledPoint(0.0, new DenseVector(Array(5.0, 5.0, 5.0))), 
  LabeledPoint(1.0, new DenseVector(Array(2.0, 3.0, 4.0))), 
  LabeledPoint(0.0, new DenseVector(Array(5.0, 5.0, 5.0))), 
  LabeledPoint(1.0, new DenseVector(Array(2.0, 3.0, 4.0))), 
  LabeledPoint(0.0, new DenseVector(Array(5.0, 5.0, 5.0))), 
  LabeledPoint(1.0, new DenseVector(Array(2.0, 3.0, 4.0))), 
  LabeledPoint(0.0, new DenseVector(Array(5.0, 5.0, 5.0))), 
  LabeledPoint(1.0, new DenseVector(Array(2.0, 3.0, 4.0))), 
  LabeledPoint(1.0, new DenseVector(Array(2.0, 3.0, 4.0))), 
  LabeledPoint(0.0, new DenseVector(Array(5.0, 5.0, 5.0)))
), 4)

val trainRDDofRows = trainRDD.map{ labeledPoint => Row(labeledPoint.label, labeledPoint.features)}

import org.apache.spark.sql.types.{StructType, DoubleType, StructField}
import org.apache.spark.ml.linalg.SQLDataTypes.VectorType
val trainSchema = StructType(Array(
                    StructField("label", DoubleType),
                    StructField("features", VectorType)))
val trainDF = spark.createDataFrame(trainRDDofRows, trainSchema)

trainDF.show()

val paramMap = List(
  "eta" -> 0.1f,
  "max_depth" -> 2,
  "objective" -> "binary:logistic").toMap


val xgboostModelRDD = XGBoost.train(trainRDD, paramMap, 100, 4, useExternalMemory=true)

val xgboostModelDF = XGBoost.trainWithDataFrame(trainDF, paramMap, 100, 4, useExternalMemory = true)

val xgboostPredictionRDD = xgboostModelRDD.predict(trainRDD.map{x => x.features})

xgboostPredictionRDD.toDF.show()

val xgboostPredictionDF = xgboostModelDF.transform(trainDF)

xgboostPredictionDF.show()

xgboostModelDF.booster.getFeatureScore()

